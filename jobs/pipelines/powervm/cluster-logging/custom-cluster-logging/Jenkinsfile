@Library('cluster-logging-library') _

properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Logging version from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'LoggingVersion', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get The Logging version\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["5.3:selected","5.4","5.5","5.6"]'
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Cluster Versions from the Dropdown List',
            name: 'OCPVersion', 
            referencedParameters: 'LoggingVersion', 
            script: 
                [$class: 'GroovyScript', 
                fallbackScript: [
                        classpath: [], 
                        sandbox: false, 
                        script: 'return[\'Could not get OCP version\']'
                        ], 
                script: [
                        classpath: [], 
                        sandbox: false, 
                        script: ''' 
                                if(LoggingVersion.equals("5.3")){
                                    return["OCP_4.8", "OCP_4.9", "OCP_4.10"]
                                }
                                else if(LoggingVersion.equals("5.4")){
                                    return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                                }
                                else if(LoggingVersion.equals("5.5")){
                                    return["OCP_4.9", "OCP_4.10", "OCP_4.11"]
                                }
                                else if(LoggingVersion.equals("5.6")){
                                    return["OCP_4.9", "OCP_4.10", "OCP_4.11"]
                                }
                            '''
                    ] 
            ]
        ]
            
        ])
    ])

pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:4.6-1.3'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'jump-vpc-x86_64'
        }
    }

    parameters {
        string(defaultValue: '', description: 'IP(Input the IP of cluster)', name: 'OCP_IP')
        string(defaultValue: '', description: 'Elasticsearch Index Info', name: 'Elasticsearch_index')
        string(defaultValue: '', description: 'Cluster Logging Index Info', name: 'ClusterLogging_index')
        string(defaultValue: '', description: 'Loki Operator Index Info', name: 'LokiOperator_index')
        choice(choices: ['fluentd', 'vector'], description: 'Select the Cluster Logging forwarder type', name: 'LogCollectorType')

    }

    environment {
        //parameters
        OCP_IP = "${params.OCP_IP}"

        //Cluster Logging
        LOGGINGVERSION = "${params.LoggingVersion}"
        ELASTICSEARCH_INDEX = "${params.Elasticsearch_index}"
        CLUSTERLOGGING_INDEX = "${params.ClusterLogging_index}"
        LOKIOPERATOR_INDEX = "${params.LokiOperator_index}"
        LOGCOLLECTORTYPE = "${params.LogCollectorType}"
        OCPVERSION = "${params.OCPVersion}"
        CLFCLEANUP = true
        GITHUBTOKEN = credentials('SATWIN_GITHUB_TOKEN')
    }
        stages {
            stage('Clean Up'){
                steps {
                    echo "Logging Version ${LOGGINGVERSION}"
                    echo "deploying version ${params.LoggingVersion}"
                    clusterLoggingGetKey()
                    clusterLoggingInventory()
                    clusterLoggingVars()
                    clusterLoggingExportVars()
                }
            }

            stage('Cluster Logging Deployment'){
                steps {
                    clusterLoggingGetKey()
                    clusterLoggingInventory()
                    clusterLoggingVars()
                    script {
                        CLFCLEANUP = false
                    }
                    clusterLoggingExportVars()
                }
            }
        }   
}
